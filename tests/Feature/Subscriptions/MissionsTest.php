<?php
namespace Tests\Feature\Subscriptions;

use App\Helpers\RoleHelper;
use Illuminate\Foundation\Testing\Concerns\InteractsWithDatabase;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class MissionsTest extends TestCase
{
    use InteractsWithDatabase, DatabaseTransactions;

    /**
     * @var \App\Models\User
     */
    private $user;

    protected function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = $this->createUser();
    }

    /** @test */
    public function not_logged_user_cannot_access_missions_page()
    {
        // given
        // guest user

        // when - then
        $this->get(route('mission.index'))
            ->assertRedirect('login');
    }

    /** @test */
    public function logged_user_can_access_missions_page()
    {
        // given
        // user

        // when
        $response = $this->actingAs($this->user)
            ->get(route('mission.index'));

        // then
        $response->assertOk()
            ->assertSee('Twoje misje');
    }

    /** @test */
    public function user_can_add_limited_number_of_missions()
    {
        // given
        // user
        Storage::fake('public/missions');

        // when
        // User adds allowed number of missions
        for ($i = 0; $i < RoleHelper::FREE_MISSIONS; $i++) {
            $response = $this->actingAs($this->user)
                ->post(route('mission.store'), [
                    'image'   => UploadedFile::fake()->image('mission.png'),
                    'title'   => 'Mission test',
                    'answers' => json_encode([]),
                ], [
                    'accept' => 'application/json',
                ]);
        }

        // then
        $this->assertEquals(RoleHelper::FREE_MISSIONS, $this->user->missions()->count());

        // when
        // User adds more than allowed number of missions
        $response = $this->actingAs($this->user)
            ->post(route('mission.store'), [
                'image'   => UploadedFile::fake()->image('mission.png'),
                'title'   => 'Mission test',
                'answers' => json_encode([]),
            ], [
                'accept' => 'application/json',
            ]);

        $response->assertStatus(403);

        // then
        $this->assertEquals(RoleHelper::FREE_MISSIONS, $this->user->missions()->count());
    }
}
